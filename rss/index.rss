<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>rambles</title><description>rambles</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>rambles</title><link>http://localhost:2368/</link></image><generator>Ghost 1.21</generator><lastBuildDate>Sat, 17 Feb 2018 10:37:54 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Testing your Amazon Serverless Application Model (SAM) locally with Neo4j, Lambda and Docker</title><description>Learn how to test SAM architecture using AWS Lambda functions to retrieve data from Neo4j, all with Docker! </description><link>http://localhost:2368/sam-neo4j-lambda-docker/</link><guid isPermaLink="false">5a8739ab1ca473f85a6db073</guid><category>Neo4j</category><category>SAM</category><category>Serverless Application Model</category><category>Docker</category><category>AWS</category><category>Lambda</category><dc:creator>Luke Gannon</dc:creator><pubDate>Fri, 16 Feb 2018 20:00:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/02/tim-mossholder-191483.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;h1 id="testingyouramazonserverlessapplicationmodelsamlocallywithneo4jlambdaanddocker"&gt;Testing your Amazon Serverless Application Model (SAM) locally with Neo4j, Lambda and Docker&lt;/h1&gt;
&lt;img src="http://localhost:2368/content/images/2018/02/tim-mossholder-191483.jpg" alt="Testing your Amazon Serverless Application Model (SAM) locally with Neo4j, Lambda and Docker"&gt;&lt;p&gt;So this is what I want to achieve. You should be able to do the same by the end of the post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Install Docker&lt;/li&gt;
&lt;li&gt;[ ] Install NPM&lt;/li&gt;
&lt;li&gt;[ ] Create Neo4j Docker container&lt;/li&gt;
&lt;li&gt;[ ] Docker Network to allow containers to talk to each other&lt;/li&gt;
&lt;li&gt;[ ] Install SAM Local (beta)&lt;/li&gt;
&lt;li&gt;[ ] Create template.yaml
&lt;ul&gt;
&lt;li&gt;[ ] Python&lt;/li&gt;
&lt;li&gt;[ ] JavaScript&lt;/li&gt;
&lt;li&gt;[ ] Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Create test handler
&lt;ul&gt;
&lt;li&gt;[ ] Invoke driver
&lt;ul&gt;
&lt;li&gt;[ ] Talk about possible problems and how expensive it is to invoke drives?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Run read query
&lt;ul&gt;
&lt;li&gt;[ ] Link to driver pages and different queries and transactions&lt;/li&gt;
&lt;li&gt;[ ] Why we won’t close off the connection in case our lambda is reused&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Test Lambda function&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="installdocker"&gt;Install Docker&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://lmgtfy.com/?q=install+docker+on+windows/linux/mac"&gt;http://lmgtfy.com/?q=install+docker+on+windows/linux/mac&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/install/"&gt;Install Docker | Docker Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you’re on a mac:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cmd+space&lt;/code&gt; to bring up Spotlight Search, type &lt;code&gt;terminal&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Homebrew&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Update Homebrew&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ brew update
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="4"&gt;
&lt;li&gt;Install Docker via Homebrew&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ brew cask install docker
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="5"&gt;
&lt;li&gt;&lt;code&gt;cmd+space&lt;/code&gt; to bring up Spotlight Search, type &lt;code&gt;docker&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;When it starts up, it’ll create everything in the following location&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ ls -l /usr/local/bin/docker*
lrwxr-xr-x  1 laexample  domain Users  67 Apr 12 14:14 /usr/local/bin/docker -&amp;gt; /Users/laexample/Library/Group Containers/group.com.docker/bin/docker
lrwxr-xr-x  1 laexample  domain Users  75 Apr 12 14:14 /usr/local/bin/docker-compose -&amp;gt; /Users/laexample/Library/Group Containers/group.com.docker/bin/docker-compose
lrwxr-xr-x  1 laexample  domain Users  90 Apr 12 14:14 /usr/local/bin/docker-credential-osxkeychain -&amp;gt; /Users/laexample/Library/Group Containers/group.com.docker/bin/docker-credential-osxkeychain
lrwxr-xr-x  1 laexample  domain Users  75 Apr 12 14:14 /usr/local/bin/docker-machine -&amp;gt; /Users/laexample/Library/Group Containers/group.com.docker/bin/docker-machine
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="6"&gt;
&lt;li&gt;Validate version&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;[x] Install Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="installnpm"&gt;Install NPM&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://lmgtfy.com/?q=install+npm+on+windows/linux/mac"&gt;http://lmgtfy.com/?q=install+npm+on+windows/linux/mac&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.docker.com/install/"&gt;Install Docker | Docker Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nodejs.org/en/download/"&gt;Download | Node.js&lt;/a&gt;&lt;/p&gt;
&lt;ol start="7"&gt;
&lt;li&gt;Install Node / NPM&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ brew install node
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="8"&gt;
&lt;li&gt;Validate Node and NPM&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ node -v 
$ npm -v
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;[x] Install NPM&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="createneo4jdockercontainer"&gt;Create Neo4j Docker container&lt;/h1&gt;
&lt;p&gt;So we have docker installed, NPM will be used later but now I want to get Neo4j up and running.&lt;/p&gt;
&lt;h2 id="neo4jbyversiondockerscript"&gt;Neo4j (by version) Docker Script&lt;/h2&gt;
&lt;ol start="9"&gt;
&lt;li&gt;Create executable and file&lt;br&gt;
Paste the following docker run command into an executable file like: &lt;strong&gt;&lt;code&gt;neo4j-docker.sh&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;if [ ! -d &amp;quot;$HOME/neo4j/databases/$1/&amp;quot; ]; then
	echo &amp;quot;Making directory structure&amp;quot;
  mkdir -p $HOME/neo4j/databases/$1/{data,plugins,import,logs,conf}
	echo &amp;quot;Downloading APOC&amp;quot;
curl -o $HOME/neo4j/databases/$1/plugins/apoc-3.3.0.1-all.jar https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.1/apoc-3.3.0.1-all.jar
	echo &amp;quot;Docker Run&amp;quot;
fi

docker run \
--publish=7474:7474 \
--publish=7687:7687 \
--volume=$HOME/neo4j/databases/$1/data:/data \
--volume=$HOME/neo4j/databases/$1/plugins:/plugins \
--volume=$HOME/neo4j/databases/$1/import:/import \
--volume=$HOME/neo4j/databases/$1/logs:/logs \
--env=NEO4J_dbms_memory_pagecache_size=2G \
--env=NEO4J_dbms_memory_heap_maxSize=4096m \
--env=NEO4J_AUTH=none \
--env=NEO4J_dbms_security_procedures_unrestricted=apoc.\\\* \
--env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \
--ulimit=nofile=40000:40000 \
neo4j:$1-enterprise
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;So what does it do?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the version directory doesn’t exist:
&lt;ul&gt;
&lt;li&gt;Create the version folder in &lt;code&gt;$HOME/neo4j/databases/&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create folders to be mapped to the local machine&lt;/li&gt;
&lt;li&gt;Download APOC into the plugins folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Download and run a Docker container and start Neo4j
&lt;ul&gt;
&lt;li&gt;Localhost ports &lt;code&gt;7474&lt;/code&gt; &amp;amp; &lt;code&gt;7687&lt;/code&gt; are mapped to your the container so you can get access to:
&lt;ul&gt;
&lt;li&gt;Browser/HTTP (7474)
&lt;ul&gt;
&lt;li&gt;go check it out: &lt;a href="http://localhost:7474"&gt;http://localhost:7474&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BOLT (7687)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;It’s best practise to use either env variables or map the config directory&lt;/strong&gt;&lt;br&gt;
Add the following line in and remove all &lt;code&gt;—env&lt;/code&gt; lines.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;--volume=$HOME/neo4j/databases/$1/import:/import \
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="10"&gt;
&lt;li&gt;Change executable permissions&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ chmod +x neo4j-docker.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we can create different docker containers with different versions of Neo4j by running a command similar to &lt;code&gt;./neo4j-docker.sh &amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ol start="11"&gt;
&lt;li&gt;Start &lt;strong&gt;&lt;code&gt;Neo4j&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;Docker&lt;/code&gt;&lt;/strong&gt; Container&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ ./neo4j-docker.sh 3.3.2
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="12"&gt;
&lt;li&gt;Head over to &lt;a href="http://localhost:7474"&gt;http://localhost:7474&lt;/a&gt; and create some data:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-cypher"&gt;CREATE (p:Person{ name: &amp;quot;Luke&amp;quot;}),
       (p2:Person {name:&amp;quot;Mel&amp;quot;}),
       (p)-[pris_m:IS_MARRIED_TO]-&amp;gt;(p2)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="13"&gt;
&lt;li&gt;Test our query we want to use later:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-cypher"&gt;MATCH (p:Person{ name: &amp;quot;Luke&amp;quot;})-[pris_m:IS_MARRIED_TO]-&amp;gt;(p2)
RETURN p.name, pris_m.since
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;[x] Create Neo4j Docker container&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="installsamlocalbeta"&gt;Install SAM Local (beta)&lt;/h1&gt;
&lt;ol start="13"&gt;
&lt;li&gt;Install &lt;strong&gt;&lt;code&gt;SAM&lt;/code&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;code&gt;NPM&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ npm install -g aws-sam-local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Verify the installation worked:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ sam --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you get a permission error when using &lt;strong&gt;&lt;code&gt;NPM&lt;/code&gt;&lt;/strong&gt; (such as &lt;code&gt;EACCES: permission denied&lt;/code&gt;), please see the instructions on this page of the NPM documentation: &lt;a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions"&gt;https://docs.npmjs.com/getting-started/fixing-npm-permissions&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id="upgradingvianpm"&gt;Upgrading via npm&lt;/h5&gt;
&lt;p&gt;To update &lt;strong&gt;&lt;code&gt;SAM&lt;/code&gt;&lt;/strong&gt; once installed via &lt;strong&gt;&lt;code&gt;NPM&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;$ npm update -g aws-sam-local
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;[x] Install SAM Local (beta)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="containertalkdockernetwork"&gt;Container Talk - Docker Network&lt;/h1&gt;
&lt;p&gt;In order to get our containers (SAM Local and Neo4j) speaking to each other, we need to create a network which they will share:&lt;/p&gt;
&lt;ol start="12"&gt;
&lt;li&gt;Create a network&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker network create {network-name}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let's connect the neo4j we started running before to the network.&lt;br&gt;
We'll need it's container id or name:&lt;/p&gt;
&lt;ol start="13"&gt;
&lt;li&gt;Get the container ID or name&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use the network you created and the &lt;strong&gt;&lt;code&gt;neo4j&lt;/code&gt;&lt;/strong&gt; container name&lt;/p&gt;
&lt;ol start="14"&gt;
&lt;li&gt;Connect the Neo4j container to the network&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker network connect {network-name} {neo4j-container-id/name}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets find the IP address for the &lt;strong&gt;&lt;code&gt;neo4j&lt;/code&gt;&lt;/strong&gt; container, use that in your code.&lt;/p&gt;
&lt;ol start="15"&gt;
&lt;li&gt;Get Neo4j container IP&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;docker inspect {neo4j-container-id} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the bottom of the page you’ll find within the Array of JSON objects, a “NetworkSettings” object, you’ll want &lt;code&gt;NetworkSettings.Networks.{network-name}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] Docker Network to allow containers to talk to each other&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="createtemplateyaml"&gt;Create template.yaml&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;What does a template.yaml file need?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Create template.yaml&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: My first serverless application.
Resources:
  GraphHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.lambda_handler
      Runtime: python3.6
      CodeUri: .
      Timeout: 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;- [ ] Python
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="javascript"&gt;JavaScript&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: My first serverless application.
Resources:
  GraphHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: .
      Timeout: 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;- [ ] JavaScript
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="java"&gt;Java&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Writing my first serverless application.
Resources:
  GraphHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.nineteen.neo4j.GraphHandler
      CodeUri: ./target/lambda-1.0-jar-with-dependencies.jar
      Runtime: java8
      Timeout: 999
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: you have to provide the path of the compiled jar.&lt;br&gt;
- [ ] Java&lt;/p&gt;
&lt;h2 id="dotnetcore"&gt;&lt;s&gt;dotNetCore&lt;/s&gt;&lt;/h2&gt;
&lt;p&gt;Unfortunately we’re waiting for the SAM  team to support .NetCore, sorry &lt;a href="http://localhost:2368/sam-neo4j-lambda-docker/twitter.com/cskardon"&gt;Chris Skardon&lt;/a&gt; :sadparrot:&lt;/p&gt;
&lt;h1 id="createtesthandler"&gt;Create Test Handler&lt;/h1&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;Within main.py paste the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;import null;

#TODO: Pad this out a bit
def lambda_handler(event, context):
    return &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;- [ ] Python
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="javascript"&gt;JavaScript&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;'use strict';

exports.handler = (event, context, callback) =&amp;gt; {
    console.log(event);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Props to @AdamCowley’s and his mad javascript skills. I don’t like being tortured by languages.&lt;br&gt;
- [ ] JavaScript&lt;/p&gt;
&lt;h2 id="java"&gt;Java&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;package com.nineteen.neo4j.example;

import com.amazonaws.services.lambda.runtime.Context;

private Driver driver;

public class Hello {

    public String myHandler(String name, Context context) {

        System.out.println(&amp;quot;log data to cloudwatch from stdout&amp;quot;);
        System.err.println(&amp;quot;log data tp cloudwatch from stderr&amp;quot;);
        return String.format(&amp;quot;Hello %s.&amp;quot;, name);
    }
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;- [ ] Java
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Create test handlers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="invokedriver"&gt;Invoke driver&lt;/h2&gt;
&lt;h2 id="java"&gt;Java&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;package com.nineteen.neo4j.example;

import com.amazonaws.services.lambda.runtime.Context;

public class Hello {
	private Driver driver;
	public String myHandler(String name, Context context) {
		if (driver == null)
		{
			driver = GraphDatabase.driver(&amp;quot;{URL_OF_NEO4J_CONTAINER}&amp;quot;, AuthTokens.basic(&amp;quot;neo4j&amp;quot;, &amp;quot;&amp;quot;));
		}
    }
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;- [ ] Java
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Invoke Driver&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="talkaboutpossibleproblemsandhowexpensiveitistoinvokedrives"&gt;Talk about possible problems and how expensive it is to invoke drives?&lt;/h3&gt;
&lt;h2 id="runreadquery"&gt;Run read query&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Run read query&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="javascript"&gt;JavaScript&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;'use strict';



exports.handler = (event, context, callback) =&amp;gt; {
    const neo4j = require('neo4j-driver').v1;
    const driver = new neo4j.driver('bolt://172.17.0.2:7687', neo4j.auth.basic('neo4j', 'neo') );

    const session = driver.session();

    session.run(`MATCH (p:Person{ id: {id} }),
                (p)-[prlive:LIVES_AT]-&amp;gt;(a:Address),
                (p)-[pris_p:IS_PARTNER_OF]-&amp;gt;(p2:Person),
                (p2)-[p2ris_i:IS_IDENTIFIED_BY]-&amp;gt;(g:GovID)
        WHERE p.name= {p_name} AND prlive.since&amp;gt; {prlive_since} AND a.addressLine1 = {addressLine1} AND p2.name = {p2_name}
        RETURN p.name, a.postCode, p2.name as p2name, g.type`, params)
        .then(res =&amp;gt; {
            console.log(res.records.length);

            return res.records.map(row =&amp;gt; {
                return [ row.get('p.name'), row.get('a.postCode'), row.get('p2name'), row.get('g.type') ];
            });
        })
        .then(json =&amp;gt; {
            session.close();

            return json;
        })
        .then(json =&amp;gt; {
            console.log(json);

            const end = new Date().getTime();

            console.log('-- END',  end);
            console.log('-- END', end - start);

            callback(null, {
                statusCode: 200,
                headers: { &amp;quot;x-custom-header&amp;quot; : &amp;quot;my custom header value&amp;quot; },
                body: json
            });
        })
        .catch(e =&amp;gt; {
            callback(e);
        })
        .then(() =&amp;gt; {
            return driver.close();
        });

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="java"&gt;## Java&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-java"&gt;package com.nineteen.neo4j.example;

import com.amazonaws.services.lambda.runtime.Context;

public class Hello {
	private Driver driver;
	public String myHandler(String name, Context context) {
		if (driver == null)
		{
			driver = GraphDatabase.driver(&amp;quot;{URL_OF_NEO4J_CONTAINER}&amp;quot;, AuthTokens.basic(&amp;quot;neo4j&amp;quot;, &amp;quot;&amp;quot;));
		}

		try (Session session = driver.session(AccessMode.READ))
      {
			sr = session.run(query);
			List&amp;lt;Record&amp;gt; resultList = sr.list();
			//TODO: add return: return resultList;
        }
        catch (ClientException ce)
        {
            ce.printStackTrace();
        }

      //return String.format(&amp;quot;Hello %s.&amp;quot;, name);
    }
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="linktodriverpagesanddifferentqueriesandtransactions"&gt;Link to driver pages and different queries and transactions&lt;/h3&gt;
&lt;h3 id="whywewontcloseofftheconnectionincaseourlambdaisreused"&gt;Why we won’t close off the connection in case our lambda is reused&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Why we won’t close off the connection in case our lambda is reused&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="testlambdafunction"&gt;Test Lambda function&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Test Lambda function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Didn’t even break a sweat. &lt;a href="https://www.youtube.com/watch?v=3M_5oYU-IsU"&gt;BIG SHAQ - MANS NOT HOT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md"&gt;serverless-application-model/2016-10-31.md at master · awslabs/serverless-application-model · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/awslabs/serverless-application-model/blob/master/HOWTO.md"&gt;serverless-application-model/HOWTO.md at master · awslabs/serverless-application-model · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/test-sam-local.html"&gt;Test Your Serverless Applications Locally Using SAM Local (Public Beta) - AWS Lambda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title>MDM? POLE? SVP?</title><description>My take on the world of modelling and managing master data, real world scenarios and what the hell is an Single View of Person</description><link>http://localhost:2368/mdm-pole-svp/</link><guid isPermaLink="false">5a88025e42bf9efeb94ae474</guid><category>MDM</category><category>POLE</category><category>SVP</category><dc:creator>Luke Gannon</dc:creator><pubDate>Wed, 08 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;h1 id="mdmpolesvp"&gt;MDM? POLE? SVP?&lt;/h1&gt;
&lt;p&gt;These are terms I use a lot when I hear anybody start talking about federating data sources; especially when the different sources contain customer/user data - as my best friends say, I love a good buzzword all taken from my previous consulting days, I see you S.A.M. :unamused:&lt;/p&gt;
&lt;p&gt;Master Data Management is a term I hear being thrown around everywhere, for pretty much every use case I'm involved in and I've see a broad range of topics and challenges. My understanding and how I interpret nearly everyone's use of the term:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;We want to define a group standard for data when sharing data cross departments/system/externally, and/or enforce of a standard of quality&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Throughout the mid 00's, MDM was a hot topic for peoples lips with the world going out and designing enormous schemas (I will assume this also increased the demand for A3-0 printers in the work place) to then go on and place non-existent data into relational stores, hiring people like me to make sure their tables didn't grow too big and slow... we all did it.&lt;/p&gt;
&lt;p&gt;After the first decade of fun, I was introduced by a dear friend &amp;amp; mentor - Sarah Morgan into modelling data sources using POLE as a base for quality and structure. Every data item when boiled up should be definable into one of the following entities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Locations&lt;/li&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of the entities can be further broken down and coded into subtypes, if we were to look at a real world example, a person in this day and age is made up of a series of aliases used throughout the real and virtual worlds.&lt;br&gt;
In order for matching to be performed to be able to get a full picture of user habits, you will need to somehow link these entities through aliases to confirm and create a master record. Simple. :thinking_face:&lt;/p&gt;
&lt;p&gt;Let’s define our problem space to be with our marketing department:&lt;/p&gt;
&lt;p&gt;Penny has an exciting vision. She wants to be able to align emails from customers to their social media sentiment they've been tracking in real-time, while monitoring support and complaints and so on. Like usual, the world is her department's oyster.&lt;br&gt;
But they're in a pickle, as their requirements list is growing and they still haven't learnt to code.&lt;br&gt;
Penny falls back on trusty Darren, he's the cool guy in the IT department, wiz with all sorts and all round lovely guy (he even asks whether you want a cuppa or not, and there are 4 floors between them).&lt;br&gt;
So where the fudge does he start in using POLE as the structure of his MDM model.&lt;/p&gt;
&lt;p&gt;and with that intro they want to start with looking at the data sources that &lt;s&gt;Darren&lt;/s&gt; Penny is the SME for (they've been asked to gather data previously from these sources):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Customer Database for:
&lt;ul&gt;
&lt;li&gt;Mobile app data including location&lt;/li&gt;
&lt;li&gt;Website page view history&lt;/li&gt;
&lt;li&gt;Marketing history&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Social Media Source&lt;/li&gt;
&lt;li&gt;Email File server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tell me more about this &lt;code&gt;POLE&lt;/code&gt; you speak of, some might be saying...&lt;/p&gt;
&lt;p&gt;Its simple, each letter stands for an master entity type which can also have children through sub types and hierarchies:&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&amp;gt; Object
  -&amp;gt; Vehicle  -&amp;gt; Car
                -&amp;gt; Estate
                -&amp;gt; Hatchback
                ...
              -&amp;gt; Truck
                etc.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="people"&gt;People&lt;/h3&gt;
&lt;p&gt;I see many people struggle with trying to get to grip with the use of the main two subtypes of entities, Alias and SVP. These don't have to solely be the only subtypes that are used as I've seen it continued and expanded with &lt;code&gt;:Companies&lt;/code&gt; and &lt;code&gt;:Systems&lt;/code&gt; that are important to the domain... Maybe it should really be changed to &lt;code&gt;:Persona&lt;/code&gt; or something.&lt;br&gt;
An alias can be any login, email, handle that comes across from your data sources that represent a Person, Customer, Companies, Users... whatever you want to call them.&lt;/p&gt;
&lt;p&gt;For example, if I wanted to build an alias from an email I've discovered, I would use the address as the unique key and address extra metadata like IPs specific to alias into that datatype.&lt;/p&gt;
&lt;p&gt;(a:Alias { id: email_address, primary_ip: ip1, known_ips: ['ip1', 'ip2'] } )&lt;/p&gt;
&lt;p&gt;When I've analysed and defined my/the criteria for identifying aliases who we are confident can be grouped together to represent the same person, we can look to build an SVP. I will speak about SVP in a bit more detail later.&lt;/p&gt;
&lt;h3 id="objects"&gt;Objects&lt;/h3&gt;
&lt;p&gt;Objects are usually the easiest to define when the domain is understood. But structure of the objects is key, as some are constrained by their specific domains and/or may have strict topologies depending on whether they are process or communication driven.&lt;/p&gt;
&lt;p&gt;In any domain there can be a range of objects from documents and emails; phones and devices; vehicles (we can break this category down even further, like we did in the example above - boats, planes, cars and trains) etc. We're even seeing DNA all the way through to Biometrics being persisted in Health Care and Security use cases!&lt;/p&gt;
&lt;h3 id="locations"&gt;Locations&lt;/h3&gt;
&lt;p&gt;Locations usually end up being a set of trees structures to represent different location hierarchies; where the nodes within certain trees may also interconnect at select points through the rules and enhancements applied by different stages/services that perform ETL from sources.&lt;/p&gt;
&lt;p&gt;We may have customer addresses that we've defined as a particular entity structure forced by our input form which is super outdated, but for Penny's recently new found data science knowledge, &lt;s&gt;Darren&lt;/s&gt; Penny will need to drill down and understand users by particular areas of interest - &amp;quot;Why did we see a peak in sales for product x in territory y after campaign z&amp;quot;.&lt;/p&gt;
&lt;p&gt;A postal structure is typically the easiest to mimic from the addresses provided by customers of a particular country, expanding a single &lt;code&gt;:LocationAddress&lt;/code&gt; into its individual values such as &lt;code&gt;:LocationCountry&lt;/code&gt; or &lt;code&gt;:LocationRoad&lt;/code&gt;, or simply with Neo4j as multiple labels we &lt;code&gt;:Location:Country&lt;/code&gt;, this will allow us to navigate and generalise the questions we want to discover without always having to know the specific details of our exploration.&lt;/p&gt;
&lt;p&gt;Our postal location structure could end up looking similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&amp;gt; Location
  -&amp;gt; Country
    -&amp;gt; Counties or States
      -&amp;gt; Post or Zip Codes
        -&amp;gt; Roads
          -&amp;gt; House Numbers
            -&amp;gt; Address
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if we wanted to combine location data from our mobile application, we would probably look to introduce GPS coordinates &lt;code&gt;:Location:GPS&lt;/code&gt; which could be made up of just an longitude and latitude, with or without a estimate of error/deviation.&lt;br&gt;
The reason I said above that these trees may link, would be through us enhancing the data we can calculate this on ingestion or update of the data or use external geo-coding services to match GPS coordinates to countries, states, even down to the house number as service jobs. #GodBlessTheInternet&lt;/p&gt;
&lt;h4 id="pitstoptransitiongraph"&gt;Pit stop: Transition Graph&lt;/h4&gt;
&lt;p&gt;Hopefully, each system or data source that we will look to federated will be state driven or we can generalise the data transition into states.&lt;/p&gt;
&lt;p&gt;I like to first define with a customer my take on a &amp;quot;Transition Graph&amp;quot; (basically, combining a generalised transition graph with a State Diagram, pretty colours on low tech) so I can relay my understanding of the problem in order to clarify that we're singing from the same hymn sheet. These are great when we need refer back to specific transitions in order to describe how entities are affected or manipulated - Plus its a piece of brilliant documentation that can be picked up and understood by anyone in the business, especially when you're building connectors to systems with bespoke ETL requirements.&lt;/p&gt;
&lt;p&gt;For each state, define the data requirements, all relevant parties &amp;amp; systems involved and the conditions they must adhered to - each state should be on an individual sheet and you should try and organise them into a numerical hierarchy&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;A user order must move into the state of 4.0-Cancelled, before it can transition to 4.1-Refund or 4.2-Reordered&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Taking a problem domain and breaking it down like this makes for simple documentation simply for traceability at different levels of granularity for each of the models individual entities. I see this especially useful when building distributed systems by distributed teams, when the vision is eventually to provide a means for automatic enhancement of the data.&lt;br&gt;
It becomes super important and useful to constantly refer back to, when systems must collect and amalgamate data in a particular order of precedence either for a design or strategic reason (business can see a quick win) or that we have a predefined condition out of our control - e.g. someone was lazy back in the day, so in order to enhance customer C with metadata m from source S, we must use source system A to be able to join the user through property Z; some API will only provide all the information through querying separate endpoints, etc. etc.&lt;/p&gt;
&lt;h3 id="events"&gt;Events&lt;/h3&gt;
&lt;p&gt;The states we discover and define can be trivially mapped to Event entities for our data model from real world definitions, our use case would carry the example of: the user's requests to cancel an order. This can also go on to provide the basis of future endpoints and message payloads which underpin a business process plus the principles of RESTful design.&lt;/p&gt;
&lt;p&gt;Like all the other entities that make up POLE, Events I deem to be the enhancer of context through structure. Events add a notion of importance through time, or the requests that drive the model, by being the entity to connect all others through itself: &lt;code&gt;*User Sign Up Complete*&lt;/code&gt; request could well produce an &lt;code&gt;:Alias&lt;/code&gt; type.&lt;br&gt;
Events help us in mapping how people, objects, location and even other events relate to each other. It allows us to ask detective like questions similar to: &lt;code&gt;&amp;quot;Who was present in the vehicle stop and search that took place at location l on date x?&amp;quot;&lt;/code&gt; or in &lt;s&gt;Darren&lt;/s&gt;Penny's marketing use case we might reach options to progress from a state due to conditions like: &lt;code&gt;Alias 1 is requesting agreement; Alias 1 failed a check e.g. &amp;gt; minimum salary requirement&lt;/code&gt; so we can either &lt;code&gt;Finish&lt;/code&gt; or &lt;code&gt;Request a co-signer/guarantor&lt;/code&gt; in which &lt;code&gt;:Alias 2&lt;/code&gt; with the added metadata, &lt;code&gt;Mother&lt;/code&gt;, will enhance our graph model.&lt;/p&gt;
&lt;h4 id="usingpole"&gt;Using POLE&lt;/h4&gt;
&lt;p&gt;In a world where all of us have multiple devices, we've never really enjoyed the idea of one account to rule them all. Us users, give business and myself a hard time when we want to look at cross device attribution or perform matching to provide better search and recommendations or investigate fraudulent activity. Our habits are driven by the device we're using, the platform (designed for Android or iOS?), application type (desktop web, mobile web, mobile app?), content, you name it.&lt;br&gt;
In order to link these aliases we hope to discover back to a human or entity in the eye of the law, I used the term - Single View of Person/a.&lt;/p&gt;
&lt;h3 id="svp"&gt;SVP&lt;/h3&gt;
&lt;p&gt;I'm unsure around the origins of the term, I would like to think it is a military term but I've also seen it used as Single View of Patient. Or mixed into Single Customer View in which the banks would claim the title.&lt;/p&gt;
&lt;p&gt;An SVP should be thought to be the glue that binds our aliases as we look to match and aggregate a consistent and holistic representation of an entity. It's necessary for enterprises to take advantage of such simple or naive methods as a starting block in analysing and understanding customer behaviours on a micro and macro level.&lt;br&gt;
Understanding these patterns, allows for us to deliver real-time recommendations; the right promotions to the decision maker all the way through to blocking transactions because of suspicious activity.&lt;/p&gt;
&lt;p&gt;Hopefully this gave a bit more of an explanation to POLE if you hear someone jibbering on about it. I will get around to creating some more example of &lt;s&gt;Darren&lt;/s&gt;Penny's quest with Neo4j at some point&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Allow me to introduce myself</title><description>Rambles of a young man</description><link>http://localhost:2368/allow-me-to-introduce-myself/</link><guid isPermaLink="false">5a87f0141ca473f85a6db078</guid><dc:creator>Luke Gannon</dc:creator><pubDate>Thu, 26 Jan 2017 00:00:00 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;With a new year now in full swing, I thought I should actually start sharing some of the &amp;quot;cool&amp;quot; things I get up to, in the form of little rambles that will end up on here.&lt;/p&gt;
&lt;p&gt;If I ever get around to finishing it, the first post will be on getting the data we get from Best Buy's Developer API in my favourite Graph Database.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://kinlane-productions.s3.amazonaws.com/api-evangelist-site/blog/best-buy-developer.png" alt="img"&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Although, I'm pretty sure they've blocked me for &lt;s&gt;good&lt;/s&gt; now...&lt;/small&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>